// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: resumes.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createResume = `-- name: CreateResume :one
INSERT INTO resumes(id, user_id, name, title, description, company_name, feedback, image_path, pdf_path)
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9
       )
RETURNING id, user_id, name, title, description, company_name, feedback, image_path, pdf_path, created_at, updated_at
`

type CreateResumeParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Name        string
	Title       string
	Description string
	CompanyName string
	Feedback    sql.NullString
	ImagePath   string
	PdfPath     string
}

func (q *Queries) CreateResume(ctx context.Context, arg CreateResumeParams) (Resume, error) {
	row := q.db.QueryRowContext(ctx, createResume,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Title,
		arg.Description,
		arg.CompanyName,
		arg.Feedback,
		arg.ImagePath,
		arg.PdfPath,
	)
	var i Resume
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.CompanyName,
		&i.Feedback,
		&i.ImagePath,
		&i.PdfPath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getResumeByID = `-- name: GetResumeByID :one
SELECT id, user_id, name, title, description, company_name, feedback, image_path, pdf_path, created_at, updated_at FROM resumes
WHERE resumes.id = $1
`

func (q *Queries) GetResumeByID(ctx context.Context, id uuid.UUID) (Resume, error) {
	row := q.db.QueryRowContext(ctx, getResumeByID, id)
	var i Resume
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.CompanyName,
		&i.Feedback,
		&i.ImagePath,
		&i.PdfPath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getResumesByUserID = `-- name: GetResumesByUserID :many
SELECT id, user_id, name, title, description, company_name, feedback, image_path, pdf_path, created_at, updated_at FROM resumes
WHERE resumes.user_id = $1
`

func (q *Queries) GetResumesByUserID(ctx context.Context, userID uuid.UUID) ([]Resume, error) {
	rows, err := q.db.QueryContext(ctx, getResumesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resume
	for rows.Next() {
		var i Resume
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.CompanyName,
			&i.Feedback,
			&i.ImagePath,
			&i.PdfPath,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResumeByID = `-- name: UpdateResumeByID :one
UPDATE resumes
SET
    updated_at = now(),
    feedback = $2
WHERE id = $1
RETURNING id, user_id, name, title, description, company_name, feedback, image_path, pdf_path, created_at, updated_at
`

type UpdateResumeByIDParams struct {
	ID       uuid.UUID
	Feedback sql.NullString
}

func (q *Queries) UpdateResumeByID(ctx context.Context, arg UpdateResumeByIDParams) (Resume, error) {
	row := q.db.QueryRowContext(ctx, updateResumeByID, arg.ID, arg.Feedback)
	var i Resume
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.CompanyName,
		&i.Feedback,
		&i.ImagePath,
		&i.PdfPath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
